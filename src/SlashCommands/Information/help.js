const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require("discord.js");
const emo = require("../../jsons/emoji.json");
const color = require("../../jsons/color.json");
const DatabaseManager = require("../../class/dbManager");
const dbManager = new DatabaseManager();
const commands = require("../../devs/command");

const commandNames = Object.keys(commands).map(
  (key) => "`[" + commands[key].name + "]`, "
);
const commandNamesString = commandNames.join("");

module.exports = {
  name: "help",
  description: "help command",
  options: null,
  run: async (client, interaction, args) => {
    function emoji(id) {
      return (
        client.emojis.cache.find((emoji) => emoji.id === id)?.toString() ||
        "Missing Emoji"
      );
    }

    const pages = [
      new EmbedBuilder()
        .setTitle("Help - Commande Basique")
        .setColor(color.pink)
        .setDescription("Commande Basique du bot")
        .setThumbnail(client.user.displayAvatarURL({ dynamic: true }))
        .addFields(
          {
            name: "üåê Social",
            value: [
              "**/social** - G√©rez vos interactions sociales",
              "**/mariage** - Mariez-vous avec un autre utilisateur",
              "**/divorce** - Divorcez de votre partenaire",
              "**/profil** - Affichez votre profil utilisateur",
              "**/infobot** - informations sur le bot (MAJ, pr√©vision ...)",
            ].join("\n"),
          },
          {
            name: "üéâ Divertissement",
            value: [
              "**/Divertissement** - " +
                commandNamesString +
                "\n- *Amusez-vous avec diverses commandes*",
            ].join("\n"),
          }
        )
        .setFooter({
          text: `Demand√©(e) par ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
        }),
      new EmbedBuilder()
        .setTitle("Help - Valoria")
        .setColor(color.pink)
        .setThumbnail(client.user.displayAvatarURL({ dynamic: true }))
        .setDescription("Explication et commande concernant le lore de valoria")
        .addFields({
          name: "‚öîÔ∏è Commande de Duel",
          value: [
            "**/duel @user** - D√©fiez un guerrier",
            "**/setmateriaux** - Choisissez les mat√©riaux √† utiliser",
            "**/freedaylibox** - R√©clamez votre free daily box",
            "**/upgrade** - Am√©liorez vos mat√©riaux",
            "**/sell** - Vendez vos mat√©riaux",
            "**/classement** - Consultez le classement des joueurs",
            "**/infos [ ]** - Consultez les informations sur les mat√©riaux, roles, badges, etc.",
            "**/infolore** - Consultez les informations sur le lore de Valoria",
          ].join("\n"),
        })
        .setFooter({
          text: `Demand√©(e) par ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
        }),

      new EmbedBuilder()
        .setTitle("Help - Campagne solo üößüößüöß")
        .setColor(color.pink)
        .setThumbnail(client.user.displayAvatarURL({ dynamic: true }))
        .setDescription(
          "Aucune campagne solo n'a encore √©t√© cr√©√©e, revenez plus tard pour plus d'information."
        )
        .setFooter({
          text: `Demand√©(e) par ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
        }),
      new EmbedBuilder()
        .setTitle("Help - Royaume üößüößüöß")
        .setColor(color.pink)
        .setThumbnail(client.user.displayAvatarURL({ dynamic: true }))
        .setDescription(
          "Aucun Royaume n'a encore √©t√© cr√©√©, revenez plus tard pour plus d'information."
        )
        .setFooter({
          text: `Demand√©(e) par ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
        }),
    ];
    const legendaryMaterials = await dbManager.getMateriauxByRarity(
      "Legendaire"
    );

    const legendaryMaterialsDescription = legendaryMaterials
      .map((mat) => `${emoji(emo[mat.nom])} : ${mat.nom}`)
      .join("\n");

    const hiddenPage = new EmbedBuilder()
      .setTitle("Secret Page")
      .setColor(color.pink)
      .setDescription(
        "Ho t'a trouv√© la page secr√®te ! claim ton cadeau üßß c'est une chance sur 1000 de tomber sur cette page, et te permet de claim entre 5000 et 15000 fragments !\nAinsi que d'obtenir un mat√©riau legendaire parmis la liste suivante !"
      )
      .addFields({
        name: "Mat√©riaux L√©gendaires Disponibles",
        value: legendaryMaterialsDescription,
      })
      .setFooter({
        text: `Demand√©(e) par ${interaction.user.tag}`,
        iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
      });

    let currentPage = 0;

    // Determine if the rare button should appear
    const showRareButton = Math.random() < 0.001; // 1 in 1000 chance

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("previous")
        .setLabel("‚¨ÖÔ∏è")
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId("next")
        .setLabel("‚û°Ô∏è")
        .setStyle(ButtonStyle.Primary)
    );

    if (showRareButton) {
      row.addComponents(
        new ButtonBuilder()
          .setCustomId("secret")
          .setLabel("üéÅ")
          .setStyle(ButtonStyle.Success)
      );
    }

    const message = await interaction.reply({
      embeds: [pages[currentPage]],
      components: [row],
      fetchReply: true,
    });

    const filter = (i) =>
      ["previous", "next", "secret", "claim"].includes(i.customId) &&
      i.user.id === interaction.user.id;

    const collector = message.createMessageComponentCollector({
      filter,
      time: 80000,
    });

    collector.on("collect", async (i) => {
      if (i.customId === "next") {
        currentPage = (currentPage + 1) % pages.length;
        await i.update({ embeds: [pages[currentPage]], components: [row] });
      } else if (i.customId === "previous") {
        currentPage = (currentPage - 1 + pages.length) % pages.length;
        await i.update({ embeds: [pages[currentPage]], components: [row] });
      } else if (i.customId === "secret") {
        row.addComponents(
          new ButtonBuilder()
            .setCustomId("claim")
            .setLabel("üßß Claim !!!!")
            .setStyle(ButtonStyle.Success)
        );
        await i.update({ embeds: [hiddenPage], components: [row] });
      } else if (i.customId === "claim") {
        const power = await dbManager.generateRandomPower();
        await dbManager.setPowerById(interaction.user.id, power);
        const randomMaterial =
          legendaryMaterials[
            Math.floor(Math.random() * legendaryMaterials.length)
          ];
        await dbManager.addMaterialToUser(
          interaction.user.id,
          randomMaterial.id
        );
        await i.update({
          content: `Claimed! re√ßut ${power} Fragments et un mat√©riel l√©gendaire ${emoji(
            emo[randomMaterial.nom]
          )} ${randomMaterial.nom}.`,
          embeds: [],
          components: [],
        });
      }
    });

    collector.on("end", () => {
      row.components.forEach((component) => component.setDisabled(true));
      message.edit({ components: [row] });
    });
  },
};
